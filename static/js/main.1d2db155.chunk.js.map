{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","Robots","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sOAiBeA,EAdF,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,GAAGC,EAAc,EAAdA,KAAKC,EAAS,EAATA,MAEtB,OACC,yBAAKC,UAAU,yDACd,yBAAKC,IAAM,SAASC,IAAG,+BAA0BL,EAA1B,cACtB,6BACC,4BAAKC,GACL,2BAAIC,MCyBMI,EAhCE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAalB,OACC,6BAEEA,EAAOC,KAAI,SAACC,EAAKC,GACf,OACD,kBAAC,EAAD,CACAC,IAAMD,EACNV,GAAIO,EAAOG,GAAGV,GACdC,KAAOM,EAAOG,GAAGT,KACjBC,MAAOK,EAAOG,GAAGR,aCRPU,EAdG,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAE/B,OACE,yBAAKX,UAAY,OAChB,2BACAA,UAAY,mCACZY,KAAM,SACNC,YAAY,gBACZC,SAAUH,MCACI,EATA,SAACC,GAEf,OACC,yBAAKC,MAAO,CAAEC,SAAU,SAAWC,OAAO,kBAAoBC,OAAS,UACnEJ,EAAMK,WCgDGC,G,wDA9Cb,aAAc,IAAD,8BACZ,gBAeDC,eAAiB,SAACC,GACjB,EAAKC,SAAU,CAACf,YAAcc,EAAME,OAAOC,SAf3C,EAAKC,MAAQ,CACZxB,OAAS,GACTM,YAAc,IAJH,E,gEASO,IAAD,OAElBmB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAU,EAAKR,SAAS,CAACrB,OAAO6B,S,+BAQ5B,IAAD,OACFC,EAAeC,KAAKP,MAAMxB,OAAOgC,QAAO,SAAAhC,GAC7C,OAAOA,EAAON,KAAKuC,cAAcC,SAAS,EAAKV,MAAMlB,YAAY2B,kBAElE,OAA+B,IAA3BF,KAAKP,MAAMxB,OAAOmC,OACP,uCAKd,yBAAKvC,UAAY,MACjB,wBAAIA,UAAU,MAAd,iBACA,kBAAC,EAAD,CAAWW,aAAgBwB,KAAKZ,iBAC5B,kBAAC,EAAD,KACG,kBAAC,EAAD,CAAUnB,OAAU8B,U,GApCdM,c,MCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAEP,kBAAC,IAAMC,WAAP,KACA,kBAAC,EAAD,OAGCC,SAASC,eAAe,SDmHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1d2db155.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = ({id,name,email})=>{\r\n // const {id,name,email} =props;\r\n\treturn (\r\n\t\t<div className='bg-light-green tc dib br3 pa0.5 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt = 'robots' src={`https://robohash.org/${id}?200*200`}/>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t\t<p>{email}</p>\r\n\t\t\t\t</div>\r\n\t     </div>\r\n\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({Robots})=> {\r\n\t// const cardArray = Robots.map((user,i) =>{\r\n\t// \treturn(\r\n\t// \t\t\t<Card \r\n\t// \t\t\tkey ={i} \r\n\t// \t\t\tid={Robots[i].id} \r\n\t// \t\t\tname ={Robots[i].name} \r\n\t// \t\t\temail={Robots[i].email} \r\n\t// \t\t\t/>\r\n\t\t    \r\n\t// \t\t);\r\n\t// })\r\n\r\n\treturn(\r\n\t\t<div> \r\n\t\t\t{\r\n\t\t\t\tRobots.map((user,i) =>{\r\n\t\t\t   return(\r\n\t\t\t\t\t<Card \r\n\t\t\t\t\tkey ={i} \r\n\t\t\t\t\tid={Robots[i].id} \r\n\t\t\t\t\tname ={Robots[i].name} \r\n\t\t\t\t\temail={Robots[i].email} \r\n\t\t\t\t\t/>\r\n\t\t\t    \r\n\t\t\t\t  );\r\n\t\t       })\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\t\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchField,searchChange})=>{\r\n\r\n\treturn(\r\n\t\t\t<div className = 'pa2'>\r\n\t\t\t\t<input\r\n\t\t\t\tclassName = 'pa3 ba b--green bg-lightest-blue' \r\n\t\t\t\ttype ='search' \r\n\t\t\t\tplaceholder='search robots' \r\n\t\t\t\tonChange={searchChange} />\r\n\t\t\t</div>\r\n\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n\r\n\treturn (\r\n\t\t<div style={{ overflow: 'scroll' , border:'5px solid black' , height : '800px'}}>\r\n\t\t   {props.children}\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Scroll;","import React ,{Component} from 'react';\r\nimport CardList from '../Components/CardList';\r\n// import {Robots} from './Robots';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll.js'\r\nimport './App.css';\r\n\r\nclass App extends Component{\r\n\t\tconstructor(){\r\n\t\t\tsuper()\r\n\t\t\tthis.state = {\r\n\t\t\t\tRobots : [],\r\n\t\t\t\tsearchField : ''\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tcomponentDidMount(){\r\n\r\n\t\t\tfetch(`https://jsonplaceholder.typicode.com/users`)\r\n\t\t\t.then(response =>response.json())\r\n\t\t\t.then(users => {this.setState({Robots:users})});\r\n\t\t}\r\n\r\n\t\tonSearchChange = (event) =>{\r\n\t\t\tthis.setState ({searchField : event.target.value})\r\n\t\t}\r\n\r\n\t\t\r\n\t\t\trender() {\r\n\t\t\t\tconst filteredRobots=this.state.Robots.filter(Robots =>{\r\n\t\t\t\t\treturn Robots.name.toLowerCase().includes(this.state.searchField.toLowerCase())\r\n\t\t\t\t})\r\n\t\t\t\tif (this.state.Robots.length===0) {\r\n\t\t\t         return <h1>Loading</h1>\r\n\t\t          }\r\n\r\n\t\t          else{\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t<div className = 'tc'>\r\n\t\t\t\t\t<h1 className='f1'>RoobooFriends</h1>\r\n\t\t\t\t\t<SearchBox searchChange = {this.onSearchChange} />\r\n\t\t\t\t\t    <Scroll>\r\n\t\t\t\t\t       <CardList Robots = {filteredRobots} />\r\n\t\t\t\t\t    </Scroll>\r\n\t\t\t\t\t</div>\r\n\r\n\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// import Card from './Card.js';\r\n// import CardList from './CardList';\r\n// import {Robots} from './Robots.js';\r\nimport App from './Containers/App.js';\r\nimport 'tachyons'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n\t\r\n  <React.StrictMode>\r\n  <App />\r\n  </React.StrictMode>\r\n  \r\n  ,document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}